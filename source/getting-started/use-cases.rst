.. Copyright (C) 2019 Wazuh, Inc.

.. _use_cases:

Use cases
=========

Wazuh is often used to meet compliance requirements (such PCI DSS or HIPAA) and configuration standards (CIS hardening guides). It is also popular among IaaS users (eg. Amazon AWS, Azure or Google cloud) where deploying a host-based IDS in the running instances can be combined with the analysis of the infrastructure events (pulled directly from the cloud provider API).

Here is a list of common use cases:

#. `Signature-based log analysis`_
#. `File integrity monitoring`_
#. `Rootkits detection`_
#. `Security policy monitoring`_

Signature-based log analysis
----------------------------

Automated log analysis and management accelerate threat detection. There are many cases where evidence of an attack can be found in the logs of your devices, systems and applications. Wazuh can be used to automatically aggregate and analyze log data.

The Wazuh agent running on the monitored host is usually the one in charge of reading operating system and application log messages, forwarding those to the Wazuh server where the analysis takes place. When no agent is deployed, the server can also receive data via syslog from network devices or applications.

Wazuh uses decoders to identify the source application of the log message and then analyzes the data using application specific rules. Here is an example of a rule used to detect SSH authentication failure events:

.. code-block:: xml

  <rule id="5716" level="5">
    <if_sid>5700</if_sid>
    <match>^Failed|^error: PAM: Authentication</match>
    <description>SSHD authentication failed.</description>
    <group>authentication_failed,pci_dss_10.2.4,pci_dss_10.2.5,</group>
  </rule>

Rules include a ``match`` field, used to define the pattern the rule is going to be looking for. It also has a ``level`` field that specifies the resulting alert priority.

The manager will generate an alert every time an event collected by one of the agents or via syslog matches a rule with a level higher than zero.

Here is an example found in ``/var/ossec/logs/alerts/alerts.json``:

.. code-block:: json
  :class: output

  {
    "agent": {
        "id": "1041",
        "ip": "10.0.0.125",
        "name": "vpc-agent-centos-public"
    },
    "decoder": {
        "name": "sshd",
        "parent": "sshd"
    },
    "dstuser": "root",
    "full_log": "Mar  5 18:26:34 vpc-agent-centos-public sshd[9549]: Failed password for root from 58.218.199.116 port 13982 ssh2",
    "location": "/var/log/secure",
    "manager": {
        "name": "vpc-ossec-manager"
    },
    "program_name": "sshd",
    "rule": {
        "description": "Multiple authentication failures.",
        "firedtimes": 349,
        "frequency": 10,
        "groups": [
            "syslog",
            "attacks",
            "authentication_failures"
        ],
        "id": "40111",
        "level": 10,
        "pci_dss": [
            "10.2.4",
            "10.2.5"
        ]
    },
    "srcip": "58.218.199.116",
    "srcport": "13982",
    "timestamp": "2017-03-05T10:26:59-0800"
  }

Once generated by the manager, the alerts are sent to the Elastic Stack component where they are enriched with Geolocation information, stored and indexed. Kibana can then be used to search, analyze and visualize the data. See below an alert as displayed in the interface:

.. thumbnail:: ../images/getting_started/use_log_analysis.png
   :title: Log analysis
   :align: center
   :width: 100%

Wazuh provides a default ruleset, updated periodically, with over 1,600 rules for different applications.

File integrity monitoring
-------------------------

The File integrity monitoring (FIM) component detects and alerts when operating system and application files are modified. This capability is often used to detect access or changes to sensitive data. If your servers are in scope with PCI DSS, the requirement 11.5 states that you must install a file integrity monitoring solution to pass your audit.

Below is an example of an alert generated when a monitored file is changed. Metadata includes MD5 and SHA1 checksums, file sizes (before and after the change), file permissions, file owner, content changes and the user who made these changes (who-data).

.. code-block:: json
    :class: output

    {
        "timestamp":"2018-07-10T14:05:28.452-0800",
        "rule":{
            "level":7,
            "description":"Integrity checksum changed.",
            "id":"550",
            "firedtimes":10,
            "mail":false,
            "groups":[
                "ossec",
                "syscheck"
            ],
            "pci_dss":[
                "11.5"
            ],
            "gpg13":[
                "4.11"
            ],
            "gdpr":[
                "II_5.1.f"
            ]
        },
        "agent":{
            "id":"058",
            "ip": "10.0.0.121",
            "name":"vpc-agent-debian"
        },
        "manager":{
            "name":"vpc-ossec-manager"
        },
        "id":"1531224328.283446",
        "syscheck":{
            "path":"/etc/hosts.allow",
            "size_before":"421",
            "size_after":"433",
            "perm_after":"100644",
            "uid_after":"0",
            "gid_after":"0",
            "md5_before":"4b8ee210c257bc59f2b1d4fa0cbbc3da",
            "md5_after":"acb2289fba96e77cee0a2c3889b49643",
            "sha1_before":"d3452e66d5cfd3bcb5fc79fbcf583e8dec736cfd",
            "sha1_after":"b87a0e558ca67073573861b26e3265fa0ab35d20",
            "sha256_before":"6504e867b41a6d1b87e225cfafaef3779a3ee9558b2aeae6baa610ec884e2a81",
            "sha256_after":"bfa1c0ec3ebfaac71378cb62101135577521eb200c64d6ee8650efe75160978c",
            "uname_after":"root",
            "gname_after":"root",
            "mtime_before":"2018-07-10T14:04:25",
            "mtime_after":"2018-07-10T14:05:28",
            "inode_after":268234,
            "diff":"10a11,12\n> 10.0.12.34\n",
            "event":"modified",
            "audit":{
                "user":{
                    "id":"0",
                    "name":"root"
                },
                "group":{
                    "id":"0",
                    "name":"root"
                },
                "process":{
                    "id":"82845",
                    "name":"/bin/nano",
                    "ppid":"3195"
                },
                "login_user":{
                    "id":"1000",
                    "name":"smith"
                },
                "effective_user":{
                    "id":"0",
                    "name":"root"
                }
            }
        },
        "decoder":{
            "name":"syscheck_integrity_changed"
        },
        "location":"syscheck"
    }

A good summary of file changes can be found in the FIM dashboard which provides drill-down capabilities to view all of the details of the alerts triggered.

.. thumbnail:: ../images/getting_started/use_fim.png
   :title: File integrity monitoring
   :align: center
   :width: 100%

Rootkits detection
------------------

The Wazuh agent periodically scans the monitored system to detect rootkits both at a kernel and user level. This type of malware usually replaces or changes existing operating system components in order to alter the behavior of the system. Rootkits can hide other processes, files or network connections like itself.

Wazuh uses different detection mechanisms to look for system anomalies or well-known intrusions. This is done periodically by the `Rootcheck` component:

+-------------------------------+---------------------------------+---------+-------------+
| Action                        | Detection mechanism             | Binary  | System call |
+===============================+=================================+=========+=============+
| Detection of hidden processes | Comparing output of system      | ps      | setsid()    |
+                               +                                 +         +-------------+
|                               | binaries and system calls       |         | getpgid()   |
+                               +                                 +         +-------------+
|                               |                                 |         | kill()      |
+-------------------------------+---------------------------------+---------+-------------+
| Detection of hidden files     | Comparing output of system      | ls      | stat()      |
+                               +                                 +         +-------------+
|                               | binaries and system calls       |         | opendir()   |
+                               +                                 +         +-------------+
|                               |                                 |         | readdir()   |
+                               +---------------------------------+---------+-------------+
|                               | Scanning /dev                   | ls      | opendir()   |
+-------------------------------+---------------------------------+---------+-------------+
| Detection of hidden ports     | Comparing output of system      | netstat | bind()      |
+                               +                                 +         +             +
|                               | binaries and system calls       |         |             |
+-------------------------------+---------------------------------+---------+-------------+
| Detection of known rootkits   | Using a malicious file database |         | stat()      |
+                               +                                 +         +-------------+
|                               |                                 |         | fopen()     |
+                               +                                 +         +-------------+
|                               |                                 |         | opendir()   |
+                               +---------------------------------+---------+-------------+
|                               | Inspecting files content using  |         | fopen()     |
+                               +                                 +         +             +
|                               | signatures                      |         |             |
+                               +---------------------------------+---------+-------------+
|                               | Detecting file permission and   |         | stat()      |
+                               +                                 +         +             +
|                               | ownership anomalies             |         |             |
+-------------------------------+---------------------------------+---------+-------------+

Below is an example of an alert generated when a hidden process is found. In this case, the affected system is running a Linux kernel-level rootkit (named Diamorphine):

.. code-block:: json
  :class: output

  {
    "agent": {
        "id": "1030",
        "ip": "10.0.0.59",
        "name": "diamorphine-POC"
    },
    "decoder": {
        "name": "rootcheck"
    },
    "full_log": "Process '562' hidden from /proc. Possible kernel level rootkit.",
    "location": "rootcheck",
    "manager": {
        "name": "vpc-ossec-manager"
    },
    "rule": {
        "description": "Host-based anomaly detection event (rootcheck).",
        "firedtimes": 4,
        "groups": [
            "ossec",
            "rootcheck"
        ],
        "id": "510",
        "level": 7
    },
    "timestamp": "2017-03-05T15:13:04-0800",
    "title": "Process '562' hidden from /proc."
  }
